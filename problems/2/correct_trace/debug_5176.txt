{'line': '32', 'src': '{', 'storage': {'n': '-1', 'a': 'std::vector of length 35184337113658, capacity 35184338113832 = {<error reading variable a (Cannot access memory at address 0x0)>'}}
{'line': '34', 'src': 'cin >> n;', 'storage': {'n': '-1', 'a': 'std::vector of length 35184337113658, capacity 35184338113832 = {<error reading variable a (Cannot access memory at address 0x0)>'}}
{'line': '35', 'src': 'vector<int> a(n, 0);', 'storage': {'n': '6', 'a': 'std::vector of length 35184337113658, capacity 35184338113832 = {<error reading variable a (Cannot access memory at address 0x0)>'}}
{'line': '35', 'src': 'vector<int> a(n, 0);', 'storage': {'n': '6', 'a': 'std::vector of length 35184337113658, capacity 35184338113832 = {<error reading variable a (Cannot access memory at address 0x0)>'}}
{'line': '35', 'src': 'vector<int> a(n, 0);', 'storage': {'n': '6', 'a': 'std::vector of length 6, capacity 6 = {0, 0, 0, 0, 0, 0}'}}
{'line': '36', 'src': 'for (int i = 0; i < n; ++i)', 'storage': {'i': '1819242352', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {0, 0, 0, 0, 0, 0}'}}
{'line': '38', 'src': 'cin >> a[i];', 'storage': {'i': '0', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {0, 0, 0, 0, 0, 0}'}}
{'line': '36', 'src': 'for (int i = 0; i < n; ++i)', 'storage': {'i': '0', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 0, 0, 0, 0, 0}'}}
{'line': '38', 'src': 'cin >> a[i];', 'storage': {'i': '1', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 0, 0, 0, 0, 0}'}}
{'line': '36', 'src': 'for (int i = 0; i < n; ++i)', 'storage': {'i': '1', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 0, 0, 0, 0}'}}
{'line': '38', 'src': 'cin >> a[i];', 'storage': {'i': '2', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 0, 0, 0, 0}'}}
{'line': '36', 'src': 'for (int i = 0; i < n; ++i)', 'storage': {'i': '2', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 4, 0, 0, 0}'}}
{'line': '38', 'src': 'cin >> a[i];', 'storage': {'i': '3', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 4, 0, 0, 0}'}}
{'line': '36', 'src': 'for (int i = 0; i < n; ++i)', 'storage': {'i': '3', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 0, 0}'}}
{'line': '38', 'src': 'cin >> a[i];', 'storage': {'i': '4', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 0, 0}'}}
{'line': '36', 'src': 'for (int i = 0; i < n; ++i)', 'storage': {'i': '4', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 0}'}}
{'line': '38', 'src': 'cin >> a[i];', 'storage': {'i': '5', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 0}'}}
{'line': '36', 'src': 'for (int i = 0; i < n; ++i)', 'storage': {'i': '5', 'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '40', 'src': 'cout << f(a);', 'storage': {'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '7', 'src': '{', 'storage': {'n': '21845', 'de': 'std::stack wrapping: std::deque with -2263525205644217 elements = {-7153, 32767, -7122, 32767, -7070, 32767, -7030, 32767, -7000, 32767, -6946, 32767, -6896, 32767, -6859, 32767, -6759, 32767, -6737, 32767, -6682, 32767, -6633, 32767, -6579, 32767, -6524, 32767, -6509, 32767, -6496, 32767, -6467, 32767, -6447, 32767, -6336, 32767, -6307, 32767, -6252, 32767, -6221, 32767, -6203, 32767, -6182, 32767, -6167, 32767, -6127, 32767, -6116, 32767, -6049, 32767, -5996, 32767, -5981, 32767, -5966, 32767, -5945, 32767, -5899, 32767, -5879, 32767, -5859, 32767, -5836, 32767, -5827, 32767, -5769, 32767, -5737, 32767, -5704, 32767, -5696, 32767, -5678, 32767, -5666, 32767, -5060, 32767, -5048, 32767, -4587, 32767, -4530, 32767, -4493, 32767, -4476, 32767, -4424, 32767, -4403, 32767, -4392, 32767, -4364, 32767, -4295, 32767, -4248, 32767, -4225, 32767, -4165, 32767, 0, 0, 33, 0, -134455296, 32767, 51, 0, 3632, 0, 16, 0, -1075053569, 0, 6, 0, 4096, 0, 17, 0, 100, 0, 3, 0, 1431650368, 21845, 4, 0, 56, 0, 5, 0, 13, 0, 7, 0, -134447104, 32767, 8, 0, 0, 0, 9, 0, 1431654656, 21845, 11, 0, 1000, 0, 12, 0, 1000, 0, 13, 0, 984, 0, 14, 0, 984, 0, 23, 0, 0, 0, 25, 0, -7223, 32767, 26, 0, 2, 0, 31, 0, -4150, 32767, 15, 0, -7207, 32767, 27, 0, 28, 0...}', 'max': '1431679392', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '8', 'src': 'int n = nums.size();', 'storage': {'n': '21845', 'de': 'std::stack wrapping: std::deque with -2263525205644217 elements = {-7153, 32767, -7122, 32767, -7070, 32767, -7030, 32767, -7000, 32767, -6946, 32767, -6896, 32767, -6859, 32767, -6759, 32767, -6737, 32767, -6682, 32767, -6633, 32767, -6579, 32767, -6524, 32767, -6509, 32767, -6496, 32767, -6467, 32767, -6447, 32767, -6336, 32767, -6307, 32767, -6252, 32767, -6221, 32767, -6203, 32767, -6182, 32767, -6167, 32767, -6127, 32767, -6116, 32767, -6049, 32767, -5996, 32767, -5981, 32767, -5966, 32767, -5945, 32767, -5899, 32767, -5879, 32767, -5859, 32767, -5836, 32767, -5827, 32767, -5769, 32767, -5737, 32767, -5704, 32767, -5696, 32767, -5678, 32767, -5666, 32767, -5060, 32767, -5048, 32767, -4587, 32767, -4530, 32767, -4493, 32767, -4476, 32767, -4424, 32767, -4403, 32767, -4392, 32767, -4364, 32767, -4295, 32767, -4248, 32767, -4225, 32767, -4165, 32767, 0, 0, 33, 0, -134455296, 32767, 51, 0, 3632, 0, 16, 0, -1075053569, 0, 6, 0, 4096, 0, 17, 0, 100, 0, 3, 0, 1431650368, 21845, 4, 0, 56, 0, 5, 0, 13, 0, 7, 0, -134447104, 32767, 8, 0, 0, 0, 9, 0, 1431654656, 21845, 11, 0, 1000, 0, 12, 0, 1000, 0, 13, 0, 984, 0, 14, 0, 984, 0, 23, 0, 0, 0, 25, 0, -7223, 32767, 26, 0, 2, 0, 31, 0, -4150, 32767, 15, 0, -7207, 32767, 27, 0, 28, 0...}', 'max': '1431679392', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '9', 'src': 'stack<int> de;', 'storage': {'n': '6', 'de': 'std::stack wrapping: std::deque with -2263525205644217 elements = {-7153, 32767, -7122, 32767, -7070, 32767, -7030, 32767, -7000, 32767, -6946, 32767, -6896, 32767, -6859, 32767, -6759, 32767, -6737, 32767, -6682, 32767, -6633, 32767, -6579, 32767, -6524, 32767, -6509, 32767, -6496, 32767, -6467, 32767, -6447, 32767, -6336, 32767, -6307, 32767, -6252, 32767, -6221, 32767, -6203, 32767, -6182, 32767, -6167, 32767, -6127, 32767, -6116, 32767, -6049, 32767, -5996, 32767, -5981, 32767, -5966, 32767, -5945, 32767, -5899, 32767, -5879, 32767, -5859, 32767, -5836, 32767, -5827, 32767, -5769, 32767, -5737, 32767, -5704, 32767, -5696, 32767, -5678, 32767, -5666, 32767, -5060, 32767, -5048, 32767, -4587, 32767, -4530, 32767, -4493, 32767, -4476, 32767, -4424, 32767, -4403, 32767, -4392, 32767, -4364, 32767, -4295, 32767, -4248, 32767, -4225, 32767, -4165, 32767, 0, 0, 33, 0, -134455296, 32767, 51, 0, 3632, 0, 16, 0, -1075053569, 0, 6, 0, 4096, 0, 17, 0, 100, 0, 3, 0, 1431650368, 21845, 4, 0, 56, 0, 5, 0, 13, 0, 7, 0, -134447104, 32767, 8, 0, 0, 0, 9, 0, 1431654656, 21845, 11, 0, 1000, 0, 12, 0, 1000, 0, 13, 0, 984, 0, 14, 0, 984, 0, 23, 0, 0, 0, 25, 0, -7223, 32767, 26, 0, 2, 0, 31, 0, -4150, 32767, 15, 0, -7207, 32767, 27, 0, 28, 0...}', 'max': '1431679392', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '10', 'src': 'int max = 0;', 'storage': {'n': '6', 'de': 'std::stack wrapping: std::deque with 0 elements', 'max': '1431679392', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '11', 'src': 'for (int i = 0; i < n; i++)', 'storage': {'i': '21845', 'n': '6', 'de': 'std::stack wrapping: std::deque with 0 elements', 'max': '0', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '13', 'src': 'if (de.empty() )', 'storage': {'i': '0', 'n': '6', 'de': 'std::stack wrapping: std::deque with 0 elements', 'max': '0', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '15', 'src': 'de.push(i);', 'storage': {'i': '0', 'n': '6', 'de': 'std::stack wrapping: std::deque with 0 elements', 'max': '0', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '11', 'src': 'for (int i = 0; i < n; i++)', 'storage': {'i': '0', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '0', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '13', 'src': 'if (de.empty() )', 'storage': {'i': '1', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '0', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '18', 'src': 'else if (nums[i] >= nums[de.top()])', 'storage': {'i': '1', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '0', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '21', 'src': 'max = max > (nums[i] - nums[de.top()]) ? max : (nums[i] - nums[de.top()]);', 'storage': {'i': '1', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '0', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '11', 'src': 'for (int i = 0; i < n; i++)', 'storage': {'i': '1', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '13', 'src': 'if (de.empty() )', 'storage': {'i': '2', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '18', 'src': 'else if (nums[i] >= nums[de.top()])', 'storage': {'i': '2', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '21', 'src': 'max = max > (nums[i] - nums[de.top()]) ? max : (nums[i] - nums[de.top()]);', 'storage': {'i': '2', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '11', 'src': 'for (int i = 0; i < n; i++)', 'storage': {'i': '2', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '13', 'src': 'if (de.empty() )', 'storage': {'i': '3', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '18', 'src': 'else if (nums[i] >= nums[de.top()])', 'storage': {'i': '3', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '21', 'src': 'max = max > (nums[i] - nums[de.top()]) ? max : (nums[i] - nums[de.top()]);', 'storage': {'i': '3', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '11', 'src': 'for (int i = 0; i < n; i++)', 'storage': {'i': '3', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '13', 'src': 'if (de.empty() )', 'storage': {'i': '4', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '18', 'src': 'else if (nums[i] >= nums[de.top()])', 'storage': {'i': '4', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '21', 'src': 'max = max > (nums[i] - nums[de.top()]) ? max : (nums[i] - nums[de.top()]);', 'storage': {'i': '4', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '11', 'src': 'for (int i = 0; i < n; i++)', 'storage': {'i': '4', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '13', 'src': 'if (de.empty() )', 'storage': {'i': '5', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '18', 'src': 'else if (nums[i] >= nums[de.top()])', 'storage': {'i': '5', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '21', 'src': 'max = max > (nums[i] - nums[de.top()]) ? max : (nums[i] - nums[de.top()]);', 'storage': {'i': '5', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '11', 'src': 'for (int i = 0; i < n; i++)', 'storage': {'i': '5', 'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '29', 'src': 'return max;', 'storage': {'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '30', 'src': '}', 'storage': {'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {0}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '29', 'src': 'return max;', 'storage': {'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {1431655791}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '30', 'src': '}', 'storage': {'n': '6', 'de': 'std::stack wrapping: std::deque with 1 element = {1431655791}', 'max': '7', 'nums': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '41', 'src': 'return 0;', 'storage': {'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
{'line': '42', 'src': '}', 'storage': {'n': '6', 'a': 'std::vector of length 6, capacity 6 = {3, 10, 4, 5, 6, 3}'}}
